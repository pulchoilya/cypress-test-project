{
  "stats": {
    "suites": 1,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-18T19:13:45.865Z",
    "end": "2025-10-18T19:14:31.515Z",
    "duration": 45650,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "69bd7fbe-a2cb-494c-b3ae-0efba3dba055",
      "title": "",
      "fullFile": "cypress\\e2e\\registration-form-test.cy.js",
      "file": "cypress\\e2e\\registration-form-test.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
          "title": "Registration and Login tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Registration user",
              "fullTitle": "Registration and Login tests Registration user",
              "timedOut": null,
              "duration": 4373,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.get('.header_right > .btn').click();\ncy.contains('.modal-header', 'Log in');\ncy.contains('button', 'Registration').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password, {\n  sensitive: true\n}).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password, {\n  sensitive: true\n}).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\nemail = userData.email;\npassword = userData.password;\ncy.contains('button', 'Register').click();",
              "err": {},
              "uuid": "df099b44-ef9f-4b20-ac38-0b4b4e6704b4",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login user",
              "fullTitle": "Registration and Login tests Login user",
              "timedOut": null,
              "duration": 2660,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.get('.header_right > .btn').click();\ncy.contains('.modal-header', 'Log in');\ncy.get('#signinEmail').clear().type(email).should('have.value', email);\ncy.get('#signinPassword').clear().type(password).invoke('val').then(val => {\n  expect(val).to.eq(password);\n});\ncy.contains('button', 'Login').click();\ncy.url().should('include', '/garage');\ncy.get('.alert.alert-success').should('be.visible').and('contain.text', 'You have been successfully logged in');\ncy.get('#userNavDropdown').click();\ncy.get('.user-nav_menu .dropdown-item').contains('Logout').click();",
              "err": {},
              "uuid": "371bb288-8845-48f7-9fc9-fdd8dfbb2594",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Name\" Empty field - \"Name is required\"",
              "fullTitle": "Registration and Login tests Checking validation \"Name\" Empty field - \"Name is required\"",
              "timedOut": null,
              "duration": 3214,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().focus().blur();\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Name required').should('be.visible');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "27f90f5d-73b0-41c7-94ea-34b752f98420",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Name\" Wrong data - \"Name is invalid\"",
              "fullTitle": "Registration and Login tests Checking validation \"Name\" Wrong data - \"Name is invalid\"",
              "timedOut": null,
              "duration": 2907,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().type('!233').should('have.value', '!233');\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Name is invalid').should('be.visible');\ncy.get('#signupName').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "832a0288-22ce-45ab-a04c-c55a8357c304",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should accept a valid name",
              "fullTitle": "Registration and Login tests Should accept a valid name",
              "timedOut": null,
              "duration": 2864,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').should('not.exist');\ncy.get('#signupName').should('not.have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('not.be.disabled');",
              "err": {},
              "uuid": "f465faba-7aeb-491f-b4c0-4c65e25ff77b",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Lats Name\" Wrong length - \"Last name has to be from 2 to 20 characters long\"",
              "fullTitle": "Registration and Login tests Checking validation \"Lats Name\" Wrong length - \"Last name has to be from 2 to 20 characters long\"",
              "timedOut": null,
              "duration": 3096,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type('AlexanderTheGreatHero').should('have.value', 'AlexanderTheGreatHero');\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Last name has to be from 2 to 20 characters long').should('be.visible');\ncy.get('[name=\"lastName\"]').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "6d025371-16e8-449e-aba3-2e27e44b9f7a",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Lats Name\" Wrong data - \"Last name is invalid\"",
              "fullTitle": "Registration and Login tests Checking validation \"Lats Name\" Wrong data - \"Last name is invalid\"",
              "timedOut": null,
              "duration": 2780,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type('Dora-cal').should('have.value', 'Dora-cal');\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Last name is invalid').should('be.visible');\ncy.get('[name=\"lastName\"]').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "f33e9f7f-f359-4845-87c1-b21784116a59",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should accept a valid last name",
              "fullTitle": "Registration and Login tests Should accept a valid last name",
              "timedOut": null,
              "duration": 3096,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').should('not.exist');\ncy.get('[name=\"lastName\"]').should('not.have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('not.be.disabled');",
              "err": {},
              "uuid": "b81532b2-071c-4a03-a90d-0d366af4d014",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Email\" For empty field - \"Email required\"",
              "fullTitle": "Registration and Login tests Checking validation \"Email\" For empty field - \"Email required\"",
              "timedOut": null,
              "duration": 2453,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').focus().clear();\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Email required').should('be.visible');\ncy.get('[formcontrolname=\"email\"]').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "30fc9ac8-325c-40c7-b746-3c41eb3b73d4",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Email\" Wrong data - \"Email is incorrect\"",
              "fullTitle": "Registration and Login tests Checking validation \"Email\" Wrong data - \"Email is incorrect\"",
              "timedOut": null,
              "duration": 2660,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type('123mail.com').should('have.value', '123mail.com');\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Email is incorrect').should('be.visible');\ncy.get('[formcontrolname=\"email\"]').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "997ac3d0-095d-4238-a3bd-e562deaf0db6",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should accept a valid Email",
              "fullTitle": "Registration and Login tests Should accept a valid Email",
              "timedOut": null,
              "duration": 2869,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').clear().type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').should('not.exist');\ncy.get('[formcontrolname=\"email\"]').should('not.have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('not.be.disabled');",
              "err": {},
              "uuid": "533fe974-7b57-4d52-8980-69cdc4300a12",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Password \" For empty field error - \"Password required\"",
              "fullTitle": "Registration and Login tests Checking validation \"Password \" For empty field error - \"Password required\"",
              "timedOut": null,
              "duration": 2646,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').focus().clear();\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Password required').should('be.visible');\ncy.get('#signupPassword').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "4c8cf66c-8969-4dae-8dfe-e419b4254187",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Password \" Wrong data - \"Password has to be from 8 to 15 characters long and contain at least one integer, one capital, and one small letter\"",
              "fullTitle": "Registration and Login tests Checking validation \"Password \" Wrong data - \"Password has to be from 8 to 15 characters long and contain at least one integer, one capital, and one small letter\"",
              "timedOut": null,
              "duration": 2836,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type('Qwerqwerqwerqwerqwer').should('have.value', 'Qwerqwerqwerqwerqwer');\ncy.get('#signupRepeatPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('.invalid-feedback').contains('Password has to be from 8 to 15 characters long and contain at least one integer, one capital, and one small letter').should('be.visible');\ncy.get('#signupPassword').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "09b22f18-8bf4-4b77-bd9b-1db1ae3a5610",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Re-enter password\" For empty field error - \"Re-enter password required\"",
              "fullTitle": "Registration and Login tests Checking validation \"Re-enter password\" For empty field error - \"Re-enter password required\"",
              "timedOut": null,
              "duration": 2950,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).should('have.value', userData.password);\ncy.get('#signupRepeatPassword').focus().clear().blur();\ncy.get('.invalid-feedback').contains('Re-enter password required').should('be.visible');\ncy.get('#signupRepeatPassword').should('have.css', 'border-color', 'rgb(220, 53, 69)');\ncy.contains('button', 'Register').should('be.disabled');",
              "err": {},
              "uuid": "54215e19-e348-4630-9870-304310168173",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking validation \"Re-enter password\" Passwords do not match.\"",
              "fullTitle": "Registration and Login tests Checking validation \"Re-enter password\" Passwords do not match.\"",
              "timedOut": null,
              "duration": 2990,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.url().should('include', 'qauto.forstudy.space');\ncy.contains('button', 'Sign up').click();\ncy.contains('.modal-header', 'Registration');\ncy.get('#signupName').type(userData.firstName).should('have.value', userData.firstName);\ncy.get('[name=\"lastName\"]').clear().type(userData.lastName).should('have.value', userData.lastName);\ncy.get('[formcontrolname=\"email\"]').clear().type(userData.email).should('have.value', userData.email);\ncy.get('#signupPassword').clear().type(userData.password).invoke('val').then(val => {\n  expect(val).to.eq(userData.password);\n});\ncy.get('#signupRepeatPassword').clear().type('QWEr1235!').blur();\ncy.get('#signupRepeatPassword').invoke('val').then(val => {\n  expect(val).to.eq('QWEr1235!');\n});\ncy.contains('button', 'Register').should('be.disabled');\ncy.get('.invalid-feedback').contains('Passwords do not match').should('be.visible');\ncy.get('#signupRepeatPassword').should('have.css', 'border-color', 'rgb(220, 53, 69)');",
              "err": {},
              "uuid": "a64dd76c-827f-411d-a028-0921a3de47ad",
              "parentUUID": "75180947-9f0c-44a7-a75c-07613d6b8e9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df099b44-ef9f-4b20-ac38-0b4b4e6704b4",
            "371bb288-8845-48f7-9fc9-fdd8dfbb2594",
            "27f90f5d-73b0-41c7-94ea-34b752f98420",
            "832a0288-22ce-45ab-a04c-c55a8357c304",
            "f465faba-7aeb-491f-b4c0-4c65e25ff77b",
            "6d025371-16e8-449e-aba3-2e27e44b9f7a",
            "f33e9f7f-f359-4845-87c1-b21784116a59",
            "b81532b2-071c-4a03-a90d-0d366af4d014",
            "30fc9ac8-325c-40c7-b746-3c41eb3b73d4",
            "997ac3d0-095d-4238-a3bd-e562deaf0db6",
            "533fe974-7b57-4d52-8980-69cdc4300a12",
            "4c8cf66c-8969-4dae-8dfe-e419b4254187",
            "09b22f18-8bf4-4b77-bd9b-1db1ae3a5610",
            "54215e19-e348-4630-9870-304310168173",
            "a64dd76c-827f-411d-a028-0921a3de47ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44394,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}
